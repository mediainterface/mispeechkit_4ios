// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name miSpeechKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AVFoundation
import AudioUnit
import Foundation
import Network
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import miSpeechKit
@_hasMissingDesignatedInitializers public class StateChangedEventArgs {
  public var sessionId: Foundation.UUID? {
    get
  }
  public var state: miSpeechKit.SessionState? {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class VoiceLevelChangedEventArgs {
  public var voiceLevel: Swift.Float {
    get
  }
  @objc deinit
}
@objc public enum SessionState : Swift.Int, Swift.Decodable, Swift.RawRepresentable {
  case unknown = 0
  case created = 1
  case loading = 2
  case ready = 3
  case updating = 4
  case inProcess = 5
  case unloading = 6
  case suspended = 7
  case closed = 8
  case error = 9
  public typealias RawValue = Swift.String
  public var rawValue: miSpeechKit.SessionState.RawValue {
    get
  }
  public init?(rawValue: miSpeechKit.SessionState.RawValue)
}
@_hasMissingDesignatedInitializers public class AudioStateChangedEventArgs {
  public var isRecording: Swift.Bool {
    get
  }
  @objc deinit
}
public enum ServerType : Swift.String, Swift.Codable {
  case cloud
  case onPremise
  case speaking
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol IRecognition {
  var state: miSpeechKit.SessionState { get }
  var errorOccured: miSpeechKit.Event<miSpeechKit.ErrorOccuredEventArgs> { get }
  var previewChanged: miSpeechKit.Event<miSpeechKit.PreviewChangedEventArgs> { get }
  var resultChanged: miSpeechKit.Event<miSpeechKit.ResultChangedEventArgs> { get }
  var stateChanged: miSpeechKit.Event<miSpeechKit.StateChangedEventArgs> { get }
  var audioStateChanged: miSpeechKit.Event<miSpeechKit.AudioStateChangedEventArgs> { get }
  var voiceLevelChanged: miSpeechKit.Event<miSpeechKit.VoiceLevelChangedEventArgs> { get }
  func initializeAsync(_ context: any miSpeechKit.IRecognitionContext) async throws
  func addWordAsync(_ word: Swift.String) async throws
  func addWordAsync(_ word: any miSpeechKit.IWordInfo) async throws
  func addWordsAsync(_ words: [Swift.String]) async throws
  func addWordsAsync(_ words: [any miSpeechKit.IWordInfo]) async throws
  func startAsync(previousText: Swift.String?, followingText: Swift.String?) async throws
  func stopAsync() async throws
  func submitTextAsync(_ text: Swift.String, _ language: miSpeechKit.LanguageId) async throws
  func cleanupAsync() async throws
}
public enum AudioFormat : Swift.Int {
  case Default
  case PCM16
  case OPUS33
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ResultChangedEventArgs {
  public var sessionId: Foundation.UUID? {
    get
  }
  public var text: Swift.String {
    get
  }
  public var details: [any miSpeechKit.IRecognitionResultInfo] {
    get
  }
  @objc deinit
}
public enum MISpeechError : Swift.Error {
  case uninitialized
  case invalidContext
  case importFailed
  case invalidUser
  case unauthorized
  case invalidMessage(Swift.String)
  case sendMessageFailed
  case timeout(miSpeechKit.SessionState)
  case connectionFailed(any Swift.Error)
  case connectionTimeout
  case emptyUrl
  case invalidUrl(Swift.String)
  case http(Swift.String, Swift.Int, Swift.String, Foundation.UUID?)
  case notSupported(feature: Swift.String)
}
@_hasMissingDesignatedInitializers public class MISpeech {
  public static func createAuthenticationContext(user: Swift.String, password: Swift.String? = nil, system: Swift.String? = nil) throws -> any miSpeechKit.IAuthenticationContext
  public static func createRecognitionContext(user: Swift.String, vocabulary: Swift.String? = nil, previewResults: Swift.Bool? = nil, debug: Swift.Bool? = nil, language: Swift.String? = nil, audioFormat: miSpeechKit.AudioFormat = AudioFormat.Default) throws -> any miSpeechKit.IRecognitionContext
  public static func createRecognitionAsync(server: Swift.String? = nil, context: any miSpeechKit.IAuthenticationContext) async throws -> any miSpeechKit.IRecognition
  @objc deinit
}
public protocol IRecognitionContext {
  var user: Swift.String { get }
  var vocabulary: Swift.String? { get }
  var previewResults: Swift.Bool? { get }
  var debug: Swift.Bool? { get }
  var language: Swift.String? { get }
  var audioFormat: miSpeechKit.AudioFormat { get }
}
public protocol IAuthenticationContext {
  var system: Swift.String? { get }
  var user: Swift.String { get }
  var password: Swift.String? { get }
}
public protocol IWordInfo {
  var word: Swift.String { get set }
  var writtenAs: Swift.String? { get set }
}
@_hasMissingDesignatedInitializers public class PreviewChangedEventArgs {
  public var sessionId: Foundation.UUID? {
    get
  }
  public var text: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ErrorOccuredEventArgs {
  public var code: Swift.Int? {
    get
  }
  public var message: Swift.String {
    get
  }
  @objc deinit
}
public protocol IRecognitionResultInfo {
  var attribute: miSpeechKit.RecognitionResultAttribute { get }
  var hasEndingBlank: Swift.Bool { get }
  var hasLeadingBlank: Swift.Bool { get }
  var textBlock: Swift.String? { get }
  var word: Swift.String? { get }
}
public enum LanguageId : Swift.Int, Swift.Codable {
  case De
  case En
  case Fr
  case Ch
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Event<T> {
  public typealias EventHandler = (T) -> ()
  public func addHandler(handler: @escaping miSpeechKit.Event<T>.EventHandler)
  @objc deinit
}
public enum RecognitionResultAttribute : Swift.Int, Swift.Decodable {
  case unknown
  case word
  case newLine
  case newParagraph
  case whitespace
  case tabulator
  case textBlock
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension miSpeechKit.SessionState : Swift.Equatable {}
extension miSpeechKit.SessionState : Swift.Hashable {}
extension miSpeechKit.ServerType : Swift.Equatable {}
extension miSpeechKit.ServerType : Swift.Hashable {}
extension miSpeechKit.ServerType : Swift.RawRepresentable {}
extension miSpeechKit.AudioFormat : Swift.Equatable {}
extension miSpeechKit.AudioFormat : Swift.Hashable {}
extension miSpeechKit.AudioFormat : Swift.RawRepresentable {}
extension miSpeechKit.LanguageId : Swift.Equatable {}
extension miSpeechKit.LanguageId : Swift.Hashable {}
extension miSpeechKit.LanguageId : Swift.RawRepresentable {}
extension miSpeechKit.RecognitionResultAttribute : Swift.Equatable {}
extension miSpeechKit.RecognitionResultAttribute : Swift.Hashable {}
extension miSpeechKit.RecognitionResultAttribute : Swift.RawRepresentable {}
